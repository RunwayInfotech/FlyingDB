//**********************************************************
//************** AUTOGENERATED with FLYINGDB ***************
//**********************************************************

//
// This is a sample DatabaseAdapter class.
// No updates required.
//

#import <sqlite3.h>
#import "DatabaseAdapter.h"
#import "Person.h"
#import "Event.h"
#import "Location.h"


@implementation DatabaseAdapter

+ (NSString *) databasePath
{
    NSString *documentsPath = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];
    
    return [documentsPath stringByAppendingPathComponent:@"test.sqlite"];
}

+ (BOOL) databaseExists
{
    NSString *documentsPath = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];
    NSString *databaseFilePath = [documentsPath stringByAppendingPathComponent:@"test.sqlite"];
    return [[NSFileManager defaultManager] fileExistsAtPath:databaseFilePath];
}

+ (void) copyOverDatabase
{
    NSString *documentsPath = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];
    
    NSString *databaseDestinationPath = [documentsPath stringByAppendingPathComponent:@"test.sqlite"];
    NSString *databaseSourcePath = [[NSBundle mainBundle] pathForResource:@"test" ofType:@"sqlite"];
    
    NSFileManager *fileManager = [NSFileManager defaultManager];
    NSError *error = nil;
    
    if([fileManager fileExistsAtPath:databaseDestinationPath]==YES)
    {
        [fileManager removeItemAtPath:databaseDestinationPath error:&error];
        if(error)
            NSLog(@"ERROR: %@\n%@\n",[error userInfo], [error localizedFailureReason]);
    }
    
    [fileManager createDirectoryAtPath:documentsPath withIntermediateDirectories:YES attributes:nil error:&error];
    
    if(error)
        NSLog(@"ERROR: %@\n%@\n", [error userInfo], [error localizedFailureReason]);
    
    [fileManager copyItemAtPath:databaseSourcePath toPath:databaseDestinationPath error:&error];
    
    if(error)
        NSLog(@"ERROR: %@\n%@\n", [error userInfo], [error localizedFailureReason]);
    
}

// Utility Methods
+ (NSString *) insertToDatabase: (NSString *) queryString
{
    NSString *filePath = [self databasePath];
    sqlite3 *database;
    const char *databasePathUTF8 = [filePath UTF8String];
    char *errorMessage;
    int result=0; 
    NSString *primaryKeyInserted=nil;
    if(sqlite3_open(databasePathUTF8, &database) == SQLITE_OK)
    {
        result = sqlite3_exec(database, [queryString UTF8String], NULL, NULL, &errorMessage);
        
        if(result!=SQLITE_OK)
        {
            NSLog(@"%s, Query: %@\n\n", errorMessage, queryString);
        }
        else
        {
            primaryKeyInserted = [NSString stringWithFormat:@"%lld", sqlite3_last_insert_rowid(database)];
        }
    }
    sqlite3_close(database);
    return primaryKeyInserted;
}

+ (int) updateDeleteToDatabase: (NSString *) queryString
{
    NSString *filePath = [self databasePath];
    sqlite3 *database;
    const char *databasePathUTF8 = [filePath UTF8String];
    char *errorMessage;
    int result=0; 
    if(sqlite3_open(databasePathUTF8, &database) == SQLITE_OK)
    {
        result = sqlite3_exec(database, [queryString UTF8String], NULL, NULL, &errorMessage);
            
        if(result!=SQLITE_OK)
        {
            NSLog(@"%s, Query: %@", errorMessage, queryString);
        }
    }
    sqlite3_close(database);
    return result;
}
                
        


// -----------------------------------------------------------------------------
// Person Query Methods
// -----------------------------------------------------------------------------

+ (NSMutableArray *) getPersonListWithFieldName: (NSString*) fieldName withFieldValue: (NSString*) fieldValue withOrderBy: (NSString*) orderBy
{
    NSString *filePath = [self databasePath];
    
    NSMutableArray *pojoList = [[NSMutableArray alloc] init];
    
    sqlite3 *database;
    const char* databasePathUTF8 = [filePath UTF8String];
    if(sqlite3_open(databasePathUTF8, &database) == SQLITE_OK)
    {
        NSMutableString *query = [NSMutableString stringWithFormat:@"SELECT id, firstName, lastName, email, phone FROM Person"];
        if(fieldName!=nil && fieldValue!=nil) 
        {
        	[query appendFormat: @" WHERE %@ = '%@'", fieldName, fieldValue];
        }
        
        if(orderBy!=nil)
        {
       		[query appendFormat: @" ORDER BY %@", orderBy];
        }

        
        sqlite3_stmt * statement;
        int result = sqlite3_prepare_v2(database, [query UTF8String], -1, &statement, nil);
        if(result!=SQLITE_OK)
        {
            NSLog(@"Error with Query: %@", query);
        }
        while(sqlite3_step(statement) == SQLITE_ROW)
        {
        
            Person *newPojo = [[Person alloc] 
				initWithPersonId:[[NSString alloc] initWithUTF8String: (char*) sqlite3_column_text(statement, 0)]
				withFirstName:[[NSString alloc] initWithUTF8String: (char*) sqlite3_column_text(statement, 1)]
				withLastName:[[NSString alloc] initWithUTF8String: (char*) sqlite3_column_text(statement, 2)]
				withEmail:[[NSString alloc] initWithUTF8String: (char*) sqlite3_column_text(statement, 3)]
				withPhone:[[NSString alloc] initWithUTF8String: (char*) sqlite3_column_text(statement, 4)]];  
            [pojoList addObject:newPojo];
            
        }
        sqlite3_finalize(statement);
    }
    sqlite3_close(database);
    return pojoList;
    
}

+ (NSString *) addPersonWithFirstName: (NSString*) aFirstName withLastName: (NSString*) aLastName withEmail: (NSString*) aEmail withPhone: (NSString*) aPhone 
{ 
    NSString* query = [NSString stringWithFormat: 
                       @"INSERT INTO Person (firstName, lastName, email, phone) VALUES ('%@', '%@', '%@', '%@')", aFirstName, aLastName, aEmail, aPhone];
    return [self insertToDatabase: query];  
}

+ (int) updatePersonWithFirstName: (NSString*) aFirstName withLastName: (NSString*) aLastName withEmail: (NSString*) aEmail withPhone: (NSString*) aPhone  withFieldName: (NSString *) fieldName withFieldValue: (NSString *) fieldValue
{ 
    NSString* query = [NSString stringWithFormat: 
                       @"UPDATE Person SET firstName='%@', lastName='%@', email='%@', phone='%@' WHERE %@='%@'", aFirstName, aLastName, aEmail, aPhone, fieldName, fieldValue];
    return [self updateDeleteToDatabase: query];  
}

+ (int) removePersonWithFieldName: (NSString *) fieldName withFieldValue: (NSString *) fieldValue
{
    NSString* query = [NSString stringWithFormat: 
                       @"DELETE FROM Person WHERE %@='%@'", fieldName, fieldValue];
    return [self updateDeleteToDatabase: query];
}

// -----------------------------------------------------------------------------
// Event Query Methods
// -----------------------------------------------------------------------------

+ (NSMutableArray *) getEventListWithFieldName: (NSString*) fieldName withFieldValue: (NSString*) fieldValue withOrderBy: (NSString*) orderBy
{
    NSString *filePath = [self databasePath];
    
    NSMutableArray *pojoList = [[NSMutableArray alloc] init];
    
    sqlite3 *database;
    const char* databasePathUTF8 = [filePath UTF8String];
    if(sqlite3_open(databasePathUTF8, &database) == SQLITE_OK)
    {
        NSMutableString *query = [NSMutableString stringWithFormat:@"SELECT id, date, locationId, title FROM Event"];
        if(fieldName!=nil && fieldValue!=nil) 
        {
        	[query appendFormat: @" WHERE %@ = '%@'", fieldName, fieldValue];
        }
        
        if(orderBy!=nil)
        {
       		[query appendFormat: @" ORDER BY %@", orderBy];
        }

        
        sqlite3_stmt * statement;
        int result = sqlite3_prepare_v2(database, [query UTF8String], -1, &statement, nil);
        if(result!=SQLITE_OK)
        {
            NSLog(@"Error with Query: %@", query);
        }
        while(sqlite3_step(statement) == SQLITE_ROW)
        {
        
            Event *newPojo = [[Event alloc] 
				initWithEventId:[[NSString alloc] initWithUTF8String: (char*) sqlite3_column_text(statement, 0)]
				withDate:[[NSString alloc] initWithUTF8String: (char*) sqlite3_column_text(statement, 1)]
				withLocationId:[[NSString alloc] initWithUTF8String: (char*) sqlite3_column_text(statement, 2)]
				withTitle:[[NSString alloc] initWithUTF8String: (char*) sqlite3_column_text(statement, 3)]];  
            [pojoList addObject:newPojo];
            
        }
        sqlite3_finalize(statement);
    }
    sqlite3_close(database);
    return pojoList;
    
}

+ (NSString *) addEventWithDate: (NSString*) aDate withLocationId: (NSString*) aLocationId withTitle: (NSString*) aTitle 
{ 
    NSString* query = [NSString stringWithFormat: 
                       @"INSERT INTO Event (date, locationId, title) VALUES ('%@', '%@', '%@')", aDate, aLocationId, aTitle];
    return [self insertToDatabase: query];  
}

+ (int) updateEventWithDate: (NSString*) aDate withLocationId: (NSString*) aLocationId withTitle: (NSString*) aTitle  withFieldName: (NSString *) fieldName withFieldValue: (NSString *) fieldValue
{ 
    NSString* query = [NSString stringWithFormat: 
                       @"UPDATE Event SET date='%@', locationId='%@', title='%@' WHERE %@='%@'", aDate, aLocationId, aTitle, fieldName, fieldValue];
    return [self updateDeleteToDatabase: query];  
}

+ (int) removeEventWithFieldName: (NSString *) fieldName withFieldValue: (NSString *) fieldValue
{
    NSString* query = [NSString stringWithFormat: 
                       @"DELETE FROM Event WHERE %@='%@'", fieldName, fieldValue];
    return [self updateDeleteToDatabase: query];
}

// -----------------------------------------------------------------------------
// Location Query Methods
// -----------------------------------------------------------------------------

+ (NSMutableArray *) getLocationListWithFieldName: (NSString*) fieldName withFieldValue: (NSString*) fieldValue withOrderBy: (NSString*) orderBy
{
    NSString *filePath = [self databasePath];
    
    NSMutableArray *pojoList = [[NSMutableArray alloc] init];
    
    sqlite3 *database;
    const char* databasePathUTF8 = [filePath UTF8String];
    if(sqlite3_open(databasePathUTF8, &database) == SQLITE_OK)
    {
        NSMutableString *query = [NSMutableString stringWithFormat:@"SELECT id, streetAddress, city, state, zipcode, latitude, longitude, title FROM Location"];
        if(fieldName!=nil && fieldValue!=nil) 
        {
        	[query appendFormat: @" WHERE %@ = '%@'", fieldName, fieldValue];
        }
        
        if(orderBy!=nil)
        {
       		[query appendFormat: @" ORDER BY %@", orderBy];
        }

        
        sqlite3_stmt * statement;
        int result = sqlite3_prepare_v2(database, [query UTF8String], -1, &statement, nil);
        if(result!=SQLITE_OK)
        {
            NSLog(@"Error with Query: %@", query);
        }
        while(sqlite3_step(statement) == SQLITE_ROW)
        {
        
            Location *newPojo = [[Location alloc] 
				initWithLocationId:[[NSString alloc] initWithUTF8String: (char*) sqlite3_column_text(statement, 0)]
				withStreetAddress:[[NSString alloc] initWithUTF8String: (char*) sqlite3_column_text(statement, 1)]
				withCity:[[NSString alloc] initWithUTF8String: (char*) sqlite3_column_text(statement, 2)]
				withState:[[NSString alloc] initWithUTF8String: (char*) sqlite3_column_text(statement, 3)]
				withZipcode:[[NSString alloc] initWithUTF8String: (char*) sqlite3_column_text(statement, 4)]
				withLatitude:[[NSString alloc] initWithUTF8String: (char*) sqlite3_column_text(statement, 5)]
				withLongitude:[[NSString alloc] initWithUTF8String: (char*) sqlite3_column_text(statement, 6)]
				withTitle:[[NSString alloc] initWithUTF8String: (char*) sqlite3_column_text(statement, 7)]];  
            [pojoList addObject:newPojo];
            
        }
        sqlite3_finalize(statement);
    }
    sqlite3_close(database);
    return pojoList;
    
}

+ (NSString *) addLocationWithStreetAddress: (NSString*) aStreetAddress withCity: (NSString*) aCity withState: (NSString*) aState withZipcode: (NSString*) aZipcode withLatitude: (NSString*) aLatitude withLongitude: (NSString*) aLongitude withTitle: (NSString*) aTitle 
{ 
    NSString* query = [NSString stringWithFormat: 
                       @"INSERT INTO Location (streetAddress, city, state, zipcode, latitude, longitude, title) VALUES ('%@', '%@', '%@', '%@', '%@', '%@', '%@')", aStreetAddress, aCity, aState, aZipcode, aLatitude, aLongitude, aTitle];
    return [self insertToDatabase: query];  
}

+ (int) updateLocationWithStreetAddress: (NSString*) aStreetAddress withCity: (NSString*) aCity withState: (NSString*) aState withZipcode: (NSString*) aZipcode withLatitude: (NSString*) aLatitude withLongitude: (NSString*) aLongitude withTitle: (NSString*) aTitle  withFieldName: (NSString *) fieldName withFieldValue: (NSString *) fieldValue
{ 
    NSString* query = [NSString stringWithFormat: 
                       @"UPDATE Location SET streetAddress='%@', city='%@', state='%@', zipcode='%@', latitude='%@', longitude='%@', title='%@' WHERE %@='%@'", aStreetAddress, aCity, aState, aZipcode, aLatitude, aLongitude, aTitle, fieldName, fieldValue];
    return [self updateDeleteToDatabase: query];  
}

+ (int) removeLocationWithFieldName: (NSString *) fieldName withFieldValue: (NSString *) fieldValue
{
    NSString* query = [NSString stringWithFormat: 
                       @"DELETE FROM Location WHERE %@='%@'", fieldName, fieldValue];
    return [self updateDeleteToDatabase: query];
}

@end
